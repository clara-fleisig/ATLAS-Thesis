#ifndef NTAU__HTTHOUGHROOTOUTPUT__H
#define NTAU__HTTHOUGHROOTOUTPUT__H

/// Autogenerated code by NtupleBranchMgr on Mon Jul 10 04:53:34 2023


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class HTTHoughRootOutput: public NtupleBranchMgr{
    public:
        HTTHoughRootOutput(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <std::vector < Float_t>>       x{"x",               m_tree, this};
        NtupleBranch <std::vector < Float_t>>       y{"y",               m_tree, this};
        NtupleBranch <std::vector < Float_t>>       z{"z",               m_tree, this};
        NtupleBranch <Float_t>                      phi{"phi",             m_tree, this};
        NtupleBranch <Float_t>                      invpt{"invpt",           m_tree, this};
        NtupleBranch <Int_t>                        tracknumber{"tracknumber",     m_tree, this};
        NtupleBranch <Int_t>                        roadnumber{"roadnumber",      m_tree, this};
        NtupleBranch <std::vector < Int_t>>         barcode{"barcode",         m_tree, this};
        NtupleBranch <std::vector < Float_t>>       barcodefrac{"barcodefrac",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         eventindex{"eventindex",      m_tree, this};
        NtupleBranch <std::vector < Int_t>>         isPixel{"isPixel",         m_tree, this};
        NtupleBranch <std::vector < Int_t>>         layer{"layer",           m_tree, this};
        NtupleBranch <std::vector < Int_t>>         isBarrel{"isBarrel",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         etawidth{"etawidth",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         phiwidth{"phiwidth",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         etamodule{"etamodule",       m_tree, this};
        NtupleBranch <std::vector < Int_t>>         phimodule{"phimodule",       m_tree, this};
        NtupleBranch <std::vector < Int_t>>         ID{"ID",              m_tree, this};
        NtupleBranch <Float_t>                      candidate_barcodefrac{"candidate_barcodefrac",m_tree, this};
        NtupleBranch <Float_t>                      candidate_barcode{"candidate_barcode",m_tree, this};
        NtupleBranch <Float_t>                      candidate_eventindex{"candidate_eventindex",m_tree, this};
        NtupleBranch <Int_t>                        treeindex{"treeindex",       m_tree, this};
};
#endif // NTAU__HTTHOUGHROOTOUTPUT__H
