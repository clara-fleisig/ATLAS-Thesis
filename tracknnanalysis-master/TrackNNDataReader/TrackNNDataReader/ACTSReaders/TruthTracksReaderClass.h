#ifndef NTAU__TRUTHTRACKSREADERCLASS__H
#define NTAU__TRUTHTRACKSREADERCLASS__H

/// Autogenerated code by NtupleBranchMgr on Thu Sep  1 13:01:37 2022


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class TruthTracksReaderClass: public NtupleBranchMgr{
    public:
        TruthTracksReaderClass(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <UInt_t>                       event_id{"event_id",        m_tree, this};
        NtupleBranch <std::vector < long>>          particle_id{"particle_id",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         particle_type{"particle_type",   m_tree, this};
        NtupleBranch <std::vector < Int_t>>         process{"process",         m_tree, this};
        NtupleBranch <std::vector < Float_t>>       vx{"vx",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       vy{"vy",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       vz{"vz",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       vt{"vt",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       px{"px",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       py{"py",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       pz{"pz",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       m{"m",               m_tree, this};
        NtupleBranch <std::vector < Float_t>>       q{"q",               m_tree, this};
        NtupleBranch <std::vector < Float_t>>       eta{"eta",             m_tree, this};
        NtupleBranch <std::vector < Float_t>>       phi{"phi",             m_tree, this};
        NtupleBranch <std::vector < Float_t>>       pt{"pt",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       p{"p",               m_tree, this};
        NtupleBranch <std::vector < Int_t>>         vertex_primary{"vertex_primary",  m_tree, this};
        NtupleBranch <std::vector < Int_t>>         vertex_secondary{"vertex_secondary",m_tree, this};
        NtupleBranch <std::vector < Int_t>>         particle{"particle",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         generation{"generation",      m_tree, this};
        NtupleBranch <std::vector < Int_t>>         sub_particle{"sub_particle",    m_tree, this};
};
#endif // NTAU__TRUTHTRACKSREADERCLASS__H
