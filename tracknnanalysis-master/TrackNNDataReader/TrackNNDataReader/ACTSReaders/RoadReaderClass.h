#ifndef NTAU__ROADREADERCLASS__H
#define NTAU__ROADREADERCLASS__H

/// Autogenerated code by NtupleBranchMgr on Thu Sep  1 13:00:52 2022


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class RoadReaderClass: public NtupleBranchMgr{
    public:
        RoadReaderClass(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <UInt_t>                       event_id{"event_id",        m_tree, this};
        NtupleBranch <Int_t>                        nRoads{"nRoads",          m_tree, this};
        NtupleBranch <std::vector < Int_t>>         road_index{"road_index",      m_tree, this};
        NtupleBranch <std::vector < Int_t>>         road_accumulatorNumber{"road_accumulatorNumber",m_tree, this};
        NtupleBranch <std::vector < Float_t>>       road_qpt{"road_qpt",        m_tree, this};
        NtupleBranch <std::vector < Float_t>>       road_phi{"road_phi",        m_tree, this};
        NtupleBranch <std::vector < Float_t>>       road_eta{"road_eta",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         road_nHits{"road_nHits",      m_tree, this};
        NtupleBranch <std::vector < std::vector<Int_t>>>road_hit_indices{"road_hit_indices",m_tree, this};
        NtupleBranch <std::vector < Int_t>>         road_nTracks{"road_nTracks",    m_tree, this};
        NtupleBranch <std::vector < std::vector<Int_t>>>road_track_indices{"road_track_indices",m_tree, this};
};
#endif // NTAU__ROADREADERCLASS__H
