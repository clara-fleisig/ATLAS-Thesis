#ifndef NTAU__HITREADERCLASS__H
#define NTAU__HITREADERCLASS__H

/// Autogenerated code by NtupleBranchMgr on Thu Sep  1 13:01:15 2022


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class HitReaderClass: public NtupleBranchMgr{
    public:
        HitReaderClass(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <UInt_t>                       event_id{"event_id",        m_tree, this};
        NtupleBranch <Int_t>                        nHits{"nHits",           m_tree, this};
        NtupleBranch <std::vector < ULong64_t>>     geometry_id{"geometry_id",     m_tree, this};
        NtupleBranch <std::vector < ULong64_t>>     particle_id{"particle_id",     m_tree, this};
        NtupleBranch <std::vector < Float_t>>       tx{"tx",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       ty{"ty",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       tz{"tz",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       tt{"tt",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       tpx{"tpx",             m_tree, this};
        NtupleBranch <std::vector < Float_t>>       tpy{"tpy",             m_tree, this};
        NtupleBranch <std::vector < Float_t>>       tpz{"tpz",             m_tree, this};
        NtupleBranch <std::vector < Float_t>>       te{"te",              m_tree, this};
        NtupleBranch <std::vector < Float_t>>       deltapx{"deltapx",         m_tree, this};
        NtupleBranch <std::vector < Float_t>>       deltapy{"deltapy",         m_tree, this};
        NtupleBranch <std::vector < Float_t>>       deltapz{"deltapz",         m_tree, this};
        NtupleBranch <std::vector < Float_t>>       deltae{"deltae",          m_tree, this};
        NtupleBranch <std::vector < Int_t>>         index_perParticle{"index_perParticle",m_tree, this};
        NtupleBranch <std::vector < Int_t>>         index{"index",           m_tree, this};
        NtupleBranch <std::vector < Int_t>>         volume_id{"volume_id",       m_tree, this};
        NtupleBranch <std::vector < Int_t>>         boundary_id{"boundary_id",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         layer_id{"layer_id",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         approach_id{"approach_id",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         sensitive_id{"sensitive_id",    m_tree, this};

        void SortHitsByEventID(){}

};

#endif // NTAU__HITREADERCLASS__H
