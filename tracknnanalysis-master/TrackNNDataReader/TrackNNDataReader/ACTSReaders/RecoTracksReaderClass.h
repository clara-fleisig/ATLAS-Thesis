#ifndef NTAU__RECOTRACKSREADERCLASS__H
#define NTAU__RECOTRACKSREADERCLASS__H

/// Autogenerated code by NtupleBranchMgr on Thu Sep  1 13:01:53 2022


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class RecoTracksReaderClass: public NtupleBranchMgr{
    public:
        RecoTracksReaderClass(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <UInt_t>                       event_nr{"event_nr",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         multiTraj_nr{"multiTraj_nr",    m_tree, this};
        NtupleBranch <std::vector < Int_t>>         subTraj_nr{"subTraj_nr",      m_tree, this};
        NtupleBranch <std::vector < Int_t>>         nStates{"nStates",         m_tree, this};
        NtupleBranch <std::vector < Int_t>>         nMeasurements{"nMeasurements",   m_tree, this};
        NtupleBranch <std::vector < Int_t>>         nOutliers{"nOutliers",       m_tree, this};
        NtupleBranch <std::vector < Int_t>>         nHoles{"nHoles",          m_tree, this};
        NtupleBranch <std::vector < Int_t>>         nSharedHits{"nSharedHits",     m_tree, this};
        NtupleBranch <std::vector < Float_t>>       chi2Sum{"chi2Sum",         m_tree, this};
        NtupleBranch <std::vector < Int_t>>         NDF{"NDF",             m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>measurementChi2{"measurementChi2", m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>outlierChi2{"outlierChi2",     m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>measurementVolume{"measurementVolume",m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>measurementLayer{"measurementLayer",m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>outlierVolume{"outlierVolume",   m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>outlierLayer{"outlierLayer",    m_tree, this};
        NtupleBranch <std::vector < Int_t>>         nMajorityHits{"nMajorityHits",   m_tree, this};
        NtupleBranch <std::vector < long>>          majorityParticleId{"majorityParticleId",m_tree, this};
        NtupleBranch <std::vector < Int_t>>         t_charge{"t_charge",        m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_time{"t_time",          m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_vx{"t_vx",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_vy{"t_vy",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_vz{"t_vz",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_px{"t_px",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_py{"t_py",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_pz{"t_pz",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_theta{"t_theta",         m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_phi{"t_phi",           m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_eta{"t_eta",           m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_p{"t_p",             m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_pT{"t_pT",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_d0{"t_d0",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       t_z0{"t_z0",            m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_index{"t_index",         m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_volumeId{"t_volumeId",      m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_boundaryId{"t_boundaryId",    m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_layerId{"t_layerId",       m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_approachId{"t_approachId",    m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_sensitiveId{"t_sensitiveId",   m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_x{"t_x",             m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_y{"t_y",             m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_z{"t_z",             m_tree, this};
        NtupleBranch <std::vector < std::vector<Double_t>>>t_r{"t_r",             m_tree, this};
        NtupleBranch <std::vector < Float_t>>       eLOC0_fit{"eLOC0_fit",       m_tree, this};
        NtupleBranch <std::vector < Float_t>>       eLOC1_fit{"eLOC1_fit",       m_tree, this};
        NtupleBranch <std::vector < Float_t>>       ePHI_fit{"ePHI_fit",        m_tree, this};
        NtupleBranch <std::vector < Float_t>>       eTHETA_fit{"eTHETA_fit",      m_tree, this};
        NtupleBranch <std::vector < Float_t>>       eQOP_fit{"eQOP_fit",        m_tree, this};
        NtupleBranch <std::vector < Float_t>>       eT_fit{"eT_fit",          m_tree, this};
};
#endif // NTAU__RECOTRACKSREADERCLASS__H
