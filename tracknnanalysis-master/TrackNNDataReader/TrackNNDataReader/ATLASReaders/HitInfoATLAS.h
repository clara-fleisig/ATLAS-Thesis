#ifndef NTAU__HITINFOATLAS__H
#define NTAU__HITINFOATLAS__H

/// Autogenerated code by NtupleBranchMgr on Mon Jul 10 04:25:45 2023


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class HitInfoATLAS: public NtupleBranchMgr{
    public:
        HitInfoATLAS(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <std::vector < Int_t>>         hit_index{"hit_index",       m_tree, this};
        NtupleBranch <std::vector < Float_t>>       hit_x{"hit_x",           m_tree, this};
        NtupleBranch <std::vector < Float_t>>       hit_y{"hit_y",           m_tree, this};
        NtupleBranch <std::vector < Float_t>>       hit_z{"hit_z",           m_tree, this};
        NtupleBranch <std::vector < Float_t>>       hit_r{"hit_r",           m_tree, this};
        NtupleBranch <std::vector < Float_t>>       hit_rho{"hit_rho",         m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_volumeID{"hit_volumeID",    m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_layerID{"hit_layerID",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_moduleID{"hit_moduleID",    m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_etaModule{"hit_etaModule",   m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_phiModule{"hit_phiModule",   m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_side{"hit_side",        m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_PixorSCT{"hit_PixorSCT",    m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_recoTrackIndex{"hit_recoTrackIndex",m_tree, this};
        NtupleBranch <std::vector < std::vector<Int_t>>>hit_truthTrackBarcode{"hit_truthTrackBarcode",m_tree, this};
        NtupleBranch <std::vector < Int_t>>         hit_nTruthPart{"hit_nTruthPart",  m_tree, this};
};
#endif // NTAU__HITINFOATLAS__H
