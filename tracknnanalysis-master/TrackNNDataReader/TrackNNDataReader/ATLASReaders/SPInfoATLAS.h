#ifndef NTAU__SPInfoATLAS__H
#define NTAU__SPInfoATLAS__H

/// Autogenerated code by NtupleBranchMgr on Sun Mar 17 14:50:45 2024


#include "NtupleAnalysisUtils/NTAUTopLevelIncludes.h"
#include <vector>
#include "TTree.h"

class SPInfoATLAS: public NtupleBranchMgr{
    public:
        SPInfoATLAS(TTree* t): NtupleBranchMgr(t){
            if(t) getMissedBranches(t);
        }
     /// List of branch members
        NtupleBranch <std::vector < Int_t>>         SP_index{"SP_index",        m_tree, this};
        NtupleBranch <std::vector < Float_t>>       SP_x{"SP_x",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       SP_y{"SP_y",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       SP_z{"SP_z",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       SP_r{"SP_r",            m_tree, this};
        NtupleBranch <std::vector < Float_t>>       SP_rho{"SP_rho",          m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_volumeID{"SP_volumeID",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_layerID{"SP_layerID",      m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_moduleID{"SP_moduleID",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_etaModule{"SP_etaModule",    m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_phiModule{"SP_phiModule",    m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_side{"SP_side",         m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_PixorSCT{"SP_PixorSCT",     m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_recoTrackIndex{"SP_recoTrackIndex",m_tree, this};
        NtupleBranch <std::vector < std::vector<Int_t>>>SP_truthTrackBarcode{"SP_truthTrackBarcode",m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_nTruthPart{"SP_nTruthPart",   m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_FirstClusterIndex{"SP_FirstClusterIndex",m_tree, this};
        NtupleBranch <std::vector < Int_t>>         SP_SecondClusterIndex{"SP_SecondClusterIndex",m_tree, this};
};
#endif // NTAU__SPREADER__H
